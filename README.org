#+title: Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

This is my personal emacs config.

* Baisc UI Configuration
#+begin_src emacs-lisp 
(scroll-bar-mode -1)			; Disable visible scrollbar
(tool-bar-mode -1)              	; Disable the toolbar
(tooltip-mode -1)               	; Disable tooltips
(set-fringe-mode 10)            	; Give some breathing room
(menu-bar-mode -1)              	; Disable the menu bar
(setq ring-bell-function 'ignore)	; Disable the bell
(setq inhibit-startup-message t)	; Don't display the startup screen
(setq scroll-step 1)			; Make scrolling smoother
(setq scroll-conservatively 10000)	; Remove the jumpiness
(setq custom-file (locate-user-emacs-file "custom.el"))
(setq use-dialog-box nil)
(load custom-file 'noerror 'nomessage)

;; Set frame transparency
;(defvar benni/frame-transparency '(90 . 90))
;(set-frame-parameter (selected-frame) 'alpha benni/frame-transparency)
;(add-to-list 'default-frame-alist `(alpha . ,benni/frame-transparency))

;; Make the frame fullscreen
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Disable line numbers for some modes
(dolist (mode '(term-mode-hook
		  shell-mode-hook
		  treemacs-mode-hook
		  eshell-mode-hook
		  vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* Basic Settings
** Hooks
#+begin_src emacs-lisp
;; (setq c-default-style "linux"
;;       c-basic-offset 4
;; 	    indent-tabs-mode t)

(add-hook 'c++-mode-hook
		  (lambda ()
			(setq c-default-style "linux"
				  c-basic-offset 4
				  indent-tabs-mode t)))

(setq-default tab-width 4)

(add-hook 'makefile-mode-hook
		  (lambda ()
			(setq tab-width 8
				  sh-basic-offset 8
				  indent-tabs-mode t)))

(add-hook 'sh-mode-hook
		  (lambda ()
			(setq tab-width 4
				  sh-basic-offset 4
				  sh-indent-for-case-label 0
				  sh-indent-for-case-alt '+
				  indent-tabs-mode t)))

;; (setq	backup-directory-alist	'(("." . "~/.emacs.d/backups"))
;; 		backup-by-copying		1
;; 		delete-old-version		-1
;; 		version-control			t
;; 		vc-make-backup-files	t))
#+end_src

** Modes
#+begin_src emacs-lisp
;; SPC + r
(recentf-mode 1)

;; M-x + M-p / M-n
(setq history-length 100)
(savehist-mode 1)

;; Remember the last position in a file
(save-place-mode 1)

;; Automatically refresh buffers
(setq global-auto-revert-non-file-buffers t)
(global-auto-revert-mode 1)
#+end_src
** Startup performance
#+begin_src emacs-lisp
;; Default is 800KiB.
(setq gc-cons-threshold (* 128 1024 1024))

(defun benni/display-startup-time ()
  (message "Emacs loaded in %s seconds with %d garbage collections."
		   (format "%.2f"
				   (float-time
					(time-subtract after-init-time before-init-time)))
		   gcs-done)
  (setq gc-cons-threshold (* 4 1024 1024)))
(add-hook 'emacs-startup-hook #'benni/display-startup-time)
#+end_src

* Package management
** Initialization
This initializes the package managers.
#+begin_src emacs-lisp 
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
;; (setq use-package-verbose t)

(column-number-mode)
(global-display-line-numbers-mode t)
#+end_src
** Automatic Upgrades
#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src
** Keeping Folders clean
#+begin_src emacs-lisp
(use-package no-littering)
(setq auto-save-file-name-transforms `(("*.*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src
** Ivy
#+begin_src emacs-lisp 
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)
	 ("C-l" . ivy-alt-done)
	 ("C-j" . ivy-next-line)
	 ("C-k" . ivy-previou-line)
	 :map ivy-switch-buffer-map
	 ("C-k" . ivy-previous-line)
	 ("C-l" . ivy-done)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-k" . ivy-previous-line)
	 ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+end_src

** Counsel
#+begin_src emacs-lisp 
(use-package counsel
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history))
  :config
  (setq ivy-initial-inputs-alist nil))
#+end_src

** Prescient (Sorting by History)
#+begin_src emacs-lisp
(use-package prescient
  :config
  (setq prescient-sort-length-enable t
		prescient-filter-method '(literal regexp initialism))
  (prescient-persist-mode 1))

(use-package ivy-prescient
  :after (counsel prescient)
  :config
  (setq ivy-prescient-retain-classic-highlighting t)
  (ivy-prescient-mode 1))

(use-package company-prescient
  :after (company prescient)
  :config
  (company-prescient-mode 1))
#+end_src
** Appaerance
#+begin_src emacs-lisp 
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

;; Use the Doom Modeline.
(use-package all-the-icons
  :if (display-graphic-p)
  :commands all-the-icons-install-fonts
  :init
  (unless (find-font (font-spec :name "all-the-icons"))
    (all-the-icons-install-fonts t)))

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom (doom-modeline-height 10))

(use-package doom-themes
  :init (load-theme 'doom-palenight t))
#+end_src

** Helpful packages
#+begin_src emacs-lisp 
(use-package which-key
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))

(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))

(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

** Keybindings
#+begin_src emacs-lisp 
;; Use ESC instead of tripple-ESC
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(use-package general
  :config
  (general-create-definer benni/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC"))

(benni/leader-keys
  "o"  '(:ignore o :which-key "org")
  "oa" '(org-agenda :which-key "org agenda")
  "oc" '(org-capture :which-key "org capture")
  "."  '(counsel-find-file :which-key "open file")
  "t"  '(:ignore t :which-key "toggles")
  "tt" '(counsel-load-theme :which-key "choose theme")
  "tm" '(treemacs :which-key "treemacs")
  "g"  '(magit-status :which-key "magit")
  "b"  '(:ignore t :which-key "buffer")
  "bb" '(counsel-ibuffer :which-key "open buffer")
  "bs" '(counsel-switch-buffer :which-key "switch buffer")
  "bk" '(kill-current-buffer :which-key "kill current buffer")
  "bK" '(kill-buffer :which-key "kill buffer")
  "r"  '(recentf-open-files :which-key "recent files"))

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
					;:hook (evil-mode . benni/evil-hook)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers.
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))


(use-package hydra
  :defer t)

					; Text scaling (TODO: Add keybind)
(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("+" text-scale-increase "in")
  ("-" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(benni/leader-keys
  "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

** Development
*** projectile
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/src")
    (setq projectile-project-searchpath '("~/src")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :after (counsel projectile)
  :config (counsel-projectile-mode))
#+end_src
*** magit
#+begin_src emacs-lisp
(use-package magit
  :commands (magit-status)
  :custom
  (magit-display-buffer-function
   #'magit-display-buffer-same-window-except-diff-v1))

;; TODO: Add forge https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
;;(use-package forge
;;   :after magit)
#+end_src
*** treemacs
#+begin_src emacs-lisp 
(use-package treemacs
  :bind (:map treemacs-mode-map
			  ("J" . treemacs-select-directory)))
(use-package treemacs-evil
  :after (treemacs evil))
(use-package treemacs-projectile
  :after (treemacs projectile))
(use-package treemacs-magit
  :after (treemacs magit))
#+end_src
*** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :defer t)
#+end_src
*** lsp-mode
#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l") ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

(use-package lsp-treemacs
  :after lsp)

(use-package lsp-ivy
  :after lsp)

(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)
#+end_src
*** dap-mode
#+begin_src emacs-lisp
(use-package dap-mode
  :commands dap-debug
  :config
  (require 'dap-node)
  (dap-node-setup)

  (general-define-key
   :keymaps 'lsp-mode-map
   :prefix lsp-keymap-prefix
   "d" '(dap-hydra t :wh "debugger")))
#+end_src
*** company
#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
	      ("<tab>" . company-complete-selection))
  (:map lsp-mode-map
	("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))

#+end_src
*** C/C++ Automatic Header Guards
#+begin_src emacs-lisp
(load "~/.emacs.d/insert-header-guard.el")
(require 'insert-header-guard)
(insert-header-guard-enable)
#+end_src
*** Commenter
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind ("C-7" . evilnc-comment-or-uncomment-lines))
#+end_src
*** Rust
#+begin_src emacs-lisp
(add-to-list 'exec-path "~/.cargo/bin")
(use-package rust-mode
  :mode "\\.rs\\'")

(use-package rustic
  :after rust-mode)

(use-package cargo
  :after rust-mode
  :init
  (add-hook 'rust-mode-hook 'cargo-minor-mode)
  (add-hook 'toml-mode-hook 'cargo-minor-mode))
#+end_src
*** Python
#+begin_src emacs-lisp
(use-package python-mode
  :hook (python-mode . lsp-deferred)
  :custom
  ;; NOTE: Set these if Python 3 is called "python3".
  ;; (python-shell-interpreter "python3")
  ;; (dap-python-executable "python3")
  (dap-python-debugger 'debugpy)
  :config
  (require 'dap-python))

(use-package pyvenv
  :after python-mode
  :config
  (pyvenv-mode 1))
#+end_src
*** EditorConfig
#+begin_src emacs-lisp
(use-package editorconfig
  :defer t
  :config
  (editorconfig-mode 1))
#+end_src
*** CompilerExplorer
#+begin_src emacs-lisp
(use-package compiler-explorer
  :commands (compiler-explorer))
#+end_src
** Org Mode
*** Helper functions
#+begin_src emacs-lisp
(defun benni/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 0)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil))

(defun benni/org-font-setup ()
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (dolist (face '((org-level-1 . 1.2)
		  (org-level-2 . 1.1)
		  (org-level-3 . 1.05)
		  (org-level-4 . 1.0)
		  (org-level-5 . 1.1)
		  (org-level-6 . 1.1)
		  (org-level-7 . 1.1)
		  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

(defun benni/read-file-as-string (path)
  (with-temp-buffer
    (insert-file-contents path)
    (buffer-string)))

(defun benni/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
		      (expand-file-name "~/.emacs.d/Emacs.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'benni/org-babel-tangle-config)))
  
#+end_src

*** Org
#+begin_src emacs-lisp 
(use-package org
  :pin org
  :hook (org-mode . benni/org-mode-setup)
  :commands (org-capture org-agenda)
  :config
  (setq org-ellipsis " ▾"
	org-hide-emphasis-markers t
	org-done 'time
	org-agenda-start-with-log-mode t
	org-log-into-drawer t)

  ;; Setup org-habit
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  ;; Set org files
  (setq org-agenda-files '("~/Dokumente/org/TODO.org"
			   "~/Dokumente/org/Birthdays.org"
			   "~/Dokumente/org/Archive.org"))

  ;; Set org keywords
  (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
			    (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANCELLED(k@)")))

  ;; Set org archive targets
  (setq org-refile-targets
	'(("Archive.org" :maxlevel . 2)
	  ("TODO.org" :maxlevel . 1)))

  ;; Save org buffers after refiling
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  ;; Don't mess up indentation in source blocks.
  (setq org-src-preserve-indentation nil 
	org-edit-src-content-indentation 0)

  ;; Setup a few templates.
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("bash" . "src bash"))

  ;; Configure common tags
  (setq org-tag-alist
	'((:startgroup)
	  ;; Put mutually-exclusive tags here:
	  (:endgroup)
	  ("@home" . ?H)
	  ("@school" . ?S)
	  ("@work" . ?W)
	  ("agenda" . ?a)
	  ("planning" . ?p)
	  ("note" . ?n)
	  ("idea" . ?i)))
  
  
  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
	'(("d" "Dashboard"
	   ((agenda "" ((org-deadline-warning-days 7)))
	    (todo "NEXT"
		  ((org-agenda-overriding-header "Next Tasks")))
	    (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	  ("n" "Next Tasks"
	   ((todo "NEXT"
		  ((org-agenda-overriding-header "Next Tasks")))))

	  ("W" "Work Tasks"
	   ((todo "NEXT"
		  ((org-agenda-overriding-header "Next Tasks")))))

	  ;; Low-effort next actions
	  ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
	   ((org-agenda-overriding-header "Low Effort Tasks")
	    (org-agenda-max-todos 20)
	    (org-agenda-files org-agenda-files)))

	  ("w" "Workflow Status"
	   ((todo "WAIT"
		  ((org-agenda-overriding-header "Waiting on External")
		   (org-agenda-files org-agenda-files)))
	    (todo "REVIEW"
		  ((org-agenda-overriding-header "In Review")
		   (org-agenda-files org-agenda-files)))
	    (todo "PLAN"
		  ((org-agenda-overriding-header "In Planning")
		   (org-agenda-todo-list-sublevels nil)
		   (org-agenda-files org-agenda-files)))
	    (todo "BACKLOG"
		  ((org-agenda-overriding-header "Project Backlog")
		   (org-agenda-todo-list-sublevels nil)
		   (org-agenda-files org-agenda-files)))
	    (todo "READY"
		  ((org-agenda-overriding-header "Ready for Work")
		   (org-agenda-files org-agenda-files)))
	    (todo "ACTIVE"
		  ((org-agenda-overriding-header "Active Projects")
		   (org-agenda-files org-agenda-files)))
	    (todo "COMPLETED"
		  ((org-agenda-overriding-header "Completed Projects")
		   (org-agenda-files org-agenda-files)))
	    (todo "CANCELLED"
		  ((org-agenda-overriding-header "Cancelled Projects")
		   (org-agenda-files org-agenda-files)))))))
  (setq org-capture-templates
	'(("t" "Tasks / Projects")
	  ("tt" "Task" entry (file+olp "~/Dokumente/org/TODO.org" "Inbox")
	   "* TODO %?\n  %a\n  %i" :empty-lines 1)

	  ("j" "Journal Entries")
	  ("jj" "Journal" entry
	   (file+olp+datetree "~/Dokumente/org/Journal.org")
	   "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
	   ;; ,(benni/read-file-as-string "~/Dokumente/org/Daily.org")
	   :clock-in :clock-resume
	   :empty-lines 1)
	  ("jm" "Meeting" entry
	   (file+olp+datetree "~/Dokumente/org/Journal.org")
	   "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
	   :clock-in :clock-resume
	   :empty-lines 1)

	  ("w" "Workflows")
	  ("we" "Checking Email" entry (file+olp+datetree "~/Dokumente/org/Journal.org")
	   "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

	  ("m" "Metrics Capture")
	  ("mw" "Weight" table-line (file+headline "~/Dokumente/org/Metrics.org" "Weight")
	   "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t))))


					;(benni/org-font-setup))

;; (use-package org-evil
;;   :after (org evil))

(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Auto-Tangle
#+begin_src emacs-lisp
(defun benni/org-autotangle ()
  (org-babel-tangle))
(add-hook 'org-mode-hook
		  (lambda ()
			(add-hook 'after-save-hook #'benni/org-autotangle)))
#+end_src
*** org-babel
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
	 (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src
** Terminal modes
*** term-mode
#+begin_src emacs-lisp
(use-package term
  :commands term
  :config
  (setq explicit-shell-file-name "zsh"
		  term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+end_src
*** vterm
#+begin_src emacs-lisp
(use-package vterm
  :commands vterm
  :config
  (setq vterm-max-scrollback 10000))
#+end_src
*** eshell
#+begin_src emacs-lisp
(defun benni/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performace
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq	eshell-history-size 				10000
			eshell-buffer-maximum-lines			10000
			eshell-hist-ignoredups				t
			eshell-scroll-to-bottom-on-input	t))

(use-package eshell-git-prompt
  :after eshell)

(use-package eshell
  :hook (eshell-first-time-mode . benni/configure-eshell)
  :config
  (require 'eshell-git-prompt)
  (with-eval-after-load 'esh-opt
	  (setq eshell-destroy-buffer-when-process-dies t
			eshell-visual-commands '("htop" "zsh" "vim")))
  (eshell-git-prompt-use-theme 'powerline))
#+end_src

